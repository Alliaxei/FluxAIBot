import os
from dotenv import load_dotenv

from aiogram import Router, types

from aiogram.fsm.context import FSMContext

from apps.database.models import Gallery
from apps.database.requests import get_user_with_settings, get_session
from apps.keyboards import keyboards as kb
from apps.services.image_generattion import generate_image
from apps.states import ImageState

router = Router()
load_dotenv('.env')

GEN_API_KEY = os.getenv('GEN_API_KEY')

@router.message(ImageState.waiting_for_prompt)
async def process_prompt(message: types.Message, state: FSMContext):
    session = await get_session()
    user = await get_user_with_settings(session, message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    prompt_text = message.text.strip()

    if not prompt_text or len(prompt_text) <= 2:
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º—Ç.")
        return
    if user and user.settings:
        model = user.settings.selected_style
        size = user.settings.image_size

        processing_message = await message.answer("‚è≥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        image_url = await generate_image(
            prompt = message.text,
            model = model,
            size = size,
            user_id = user.id
        )
        if image_url == 'write_off_error':
            await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if image_url == 'insufficient_credits':
            await processing_message.edit_text(
                f"‚ùå **–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.**\n"
                f"üî¥ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤*: {user.credits}\n\n"
                f"üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
                , parse_mode="Markdown", reply_markup=kb.back
            )

            return
        if image_url:
            await processing_message.edit_text("‚úîÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            await message.answer_photo(image_url, caption=f"–í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!")
            new_gallery_item = Gallery(
                user_id=user.id,
                image_url=image_url,
                prompt=message.text,
            )

            if not session.in_transaction():
                async with session.begin():
                    session.add(new_gallery_item)
                await session.commit()
            else:
                session.add(new_gallery_item)

            await session.commit()
        else:
            await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await session.close()
    await state.clear()
    await message.answer(text="–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë?", reply_markup=kb.generate_new_image)